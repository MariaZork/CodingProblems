{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"BinaryTrees/94.BinaryTreeInorderTraversal/","text":"Description \u00b6 Given the root of a binary tree, return the inorder traversal of its nodes values. Example 1: 1 2 Input: root = [1,null,2,3] Output: [1,3,2] Example 2: 1 2 Input: root = [] Output: [] Example 3: 1 2 Input: root = [1] Output: [1] Solution \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution : def helper ( self , root , res ): if root is None : return if root . left is not None : self . helper ( root . left , res ) res . append ( root . val ) if root . right is not None : self . helper ( root . right , res ) def inorderTraversal ( self , root : TreeNode ) -> List [ int ]: res = [] self . helper ( root , res ) return res 1 2 Time complexity: O(N) Space complexity: O(N) Solution link","title":"94. Binary Tree Inorder Traversal"},{"location":"BinaryTrees/94.BinaryTreeInorderTraversal/#description","text":"Given the root of a binary tree, return the inorder traversal of its nodes values. Example 1: 1 2 Input: root = [1,null,2,3] Output: [1,3,2] Example 2: 1 2 Input: root = [] Output: [] Example 3: 1 2 Input: root = [1] Output: [1]","title":"Description"},{"location":"BinaryTrees/94.BinaryTreeInorderTraversal/#solution","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # Definition for a binary tree node. # class TreeNode: # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution : def helper ( self , root , res ): if root is None : return if root . left is not None : self . helper ( root . left , res ) res . append ( root . val ) if root . right is not None : self . helper ( root . right , res ) def inorderTraversal ( self , root : TreeNode ) -> List [ int ]: res = [] self . helper ( root , res ) return res 1 2 Time complexity: O(N) Space complexity: O(N) Solution link","title":"Solution"}]}